// Generated by CoffeeScript 1.6.2
(function() {
  var DEBUG, fadein_delay, fadeout_delay, root, wait_delay,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  DEBUG = false;

  if (!DEBUG) {
    fadein_delay = 500;
    fadeout_delay = 2000;
    wait_delay = 2000;
  } else {
    fadein_delay = 500;
    fadeout_delay = 500;
    wait_delay = 500;
  }

  root.Scene = (function() {
    function Scene(elem, config) {
      var _this = this;

      this.verses = config.verses;
      this.verseno = 0;
      this.items = config.items;
      this.basepic = config.base;
      this.start = config.start;
      this.end = config.end;
      this.endings = config.endings;
      this.elem = $(elem);
      this.credits = config.credits;
      this.score = 0;
      this.max_score = 7;
      this.min_score = -7;
      this.click = false;
      $('<div id="images" />').appendTo(this.elem);
      $('<div id="bscreen" />').appendTo(this.elem);
      $('<div id="haiku"></div>').appendTo(this.elem);
      $("#bscreen").hide();
      this.begin();
      this.elem.click(function(event) {
        var coords, os;

        os = _this.elem.offset();
        coords = {
          x: event.pageX - os.left,
          y: event.pageY - os.top
        };
        _this.next(coords);
        return null;
      });
    }

    Scene.prototype.clickOn = function() {
      return this.click = true;
    };

    Scene.prototype.clickOff = function() {
      return this.click = false;
    };

    Scene.prototype.render = function(verseitems) {
      var images, item, itemclass, _i, _len, _ref, _ref1, _results;

      images = $("#images");
      images.empty();
      $('<img />').attr({
        id: "base",
        src: this.basepic,
        "class": "disp"
      }).appendTo(images);
      if (this.items.length) {
        _ref = this.items;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          itemclass = "disp";
          if (_ref1 = item.id, __indexOf.call(verseitems, _ref1) >= 0) {
            itemclass += " clickable";
          }
          console.log(item.id + ' class: ' + itemclass);
          _results.push($('<img />').attr({
            src: item.img,
            "class": itemclass
          }).css("left", item.offset.x).css("top", item.offset.y).appendTo(images));
        }
        return _results;
      }
    };

    Scene.prototype.begin = function() {
      var _this = this;

      return $("#haiku").html('<p class="cbox">' + this.start + '</p>').delay(wait_delay).fadeOut(fadeout_delay, function() {
        return $("#haiku").html('<duv class="cbox"><h3>Verse ' + (_this.verseno + 1) + '</h3><p>' + _this.verses[0].verse + "</p></div>").fadeIn(fadein_delay, function() {
          var k;

          $("#bscreen").show().delay(wait_delay).fadeOut(fadeout_delay);
          _this.render((function() {
            var _results;

            _results = [];
            for (k in this.verses[0].items) {
              _results.push(k);
            }
            return _results;
          }).call(_this));
          return $("#haiku").delay(wait_delay).fadeOut(fadeout_delay, function() {
            return _this.clickOn();
          });
        });
      });
    };

    Scene.prototype.getEnding = function() {
      if (this.score === 0) {
        return this.endings[2];
      } else if (this.score < -3) {
        return this.endings[4];
      } else if (this.score < 0) {
        return this.endings[3];
      } else if (this.score > 3) {
        return this.endings[0];
      } else if (this.score > 0) {
        return this.endings[1];
      }
    };

    Scene.prototype.finish_click_callback = function(event, bed) {
      var coords, ending, haikuclass, item, os,
        _this = this;

      os = this.elem.offset();
      coords = {
        x: event.pageX - os.left,
        y: event.pageY - os.top
      };
      if (this.click && this.initem(coords, bed)) {
        this.clickOff();
        this.elem.unbind();
        console.log("clicked on bed!!");
        this.items = (function() {
          var _i, _len, _ref, _results;

          _ref = this.items;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            item = _ref[_i];
            if ((item.id !== bed.id) && (item.id !== "handcuffs")) {
              _results.push(item);
            }
          }
          return _results;
        }).call(this);
        console.log(this.items);
        ending = this.getEnding();
        this.render([this.end.item]);
        $('<img />').attr({
          src: ending.img,
          "class": "disp",
          id: "finalimg"
        }).css("left", ending.offset.x).css("top", ending.offset.y).css("width", ending.smallsize.x).css("height", ending.smallsize.y).appendTo(images).delay(500).animate({
          width: ending.bigsize.x,
          height: ending.bigsize.y,
          top: "50px"
        }, 1000).animate({
          opacity: 0.3
        }, 1000);
        $('#bscreen').delay(500).fadeIn(1000);
        haikuclass = 'cbox';
        if ('badending' in ending) {
          haikuclass += ' badending';
        }
        if ('goodending' in ending) {
          haikuclass += ' goodending';
        }
        console.log('haiku class ' + haikuclass);
        return $('#haiku').delay(500).html('<div class="' + haikuclass + '"><h3>Final Verse</h3><p>' + ending.text + '</p></div>').delay(1000).fadeIn(1000).delay(5000).fadeOut(1000, function() {
          return $("#haiku").html('<p class="cbox credits">' + _this.credits + '</p>').fadeIn(1000);
        });
      } else {
        return this.showText(this.end.verse);
      }
    };

    Scene.prototype.finish = function(feedback) {
      var haiku, screen,
        _this = this;

      this.clickOff();
      console.log("FINISH: ", feedback);
      screen = $("#bscreen");
      haiku = $("#haiku");
      screen.fadeIn(fadein_delay).delay(wait_delay).delay(fadeout_delay).delay(fadein_delay).delay(wait_delay).fadeOut(fadeout_delay);
      return haiku.html('<p class="cbox">' + feedback + "</p>").fadeIn(fadein_delay).delay(wait_delay).fadeOut(fadeout_delay, function() {
        return haiku.html('<div class="cbox"><h3>Verse ' + (_this.verseno + 1) + '</h3><p>' + _this.end.verse + "</p></div>").fadeIn(fadein_delay).delay(wait_delay).fadeOut(fadeout_delay, function() {
          var bed, item;

          _this.elem.unbind();
          bed = ((function() {
            var _i, _len, _ref, _results;

            _ref = this.items;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              item = _ref[_i];
              if (item.id === this.end.item) {
                _results.push(item);
              }
            }
            return _results;
          }).call(_this))[0];
          _this.elem.click(function(event) {
            return _this.finish_click_callback(event, bed);
          });
          return _this.clickOn();
        });
      });
    };

    Scene.prototype.showText = function(msg, callback) {
      var _this = this;

      this.clickOff();
      $("#bscreen").fadeIn(fadein_delay).delay(wait_delay).fadeOut(fadeout_delay / 2);
      return $("#haiku").hide().html('<p class="cbox">' + msg + "</p>").fadeIn(fadein_delay).delay(wait_delay).fadeOut(fadeout_delay / 2, function() {
        _this.clickOn();
        if (callback) {
          return callback();
        }
      });
    };

    Scene.prototype.initem = function(coord, item) {
      var initem;

      initem = item.offset.x < coord.x && coord.x < (item.offset.x + item.size.x) && item.offset.y < coord.y && coord.y < (item.offset.y + item.size.y);
      return initem;
    };

    Scene.prototype.showTexts = function(feedback, newverse, callback) {
      var haiku, screen,
        _this = this;

      screen = $("#bscreen");
      haiku = $("#haiku");
      this.clickOff();
      screen.fadeIn(fadein_delay).delay(wait_delay).delay(fadeout_delay).delay(fadein_delay).delay(wait_delay).fadeOut(fadeout_delay);
      return haiku.html('<p class="cbox">' + feedback + "</p>").fadeIn(fadein_delay).delay(wait_delay).fadeOut(fadeout_delay, function() {
        return haiku.html('<div class="cbox"><h3>Verse ' + (_this.verseno + 1) + '</h3><p>' + newverse + "</p></div>").fadeIn(fadein_delay).delay(wait_delay).fadeOut(fadeout_delay, function() {
          _this.clickOn();
          if (callback) {
            return callback();
          }
        });
      });
    };

    Scene.prototype.next = function(coord) {
      var item, k, verse, _i, _len, _ref, _results,
        _this = this;

      verse = this.verses[0];
      if (this.click) {
        this.clickOff();
        _ref = this.items.slice(0).reverse();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          if (this.initem(coord, item)) {
            if (verse.items[item.id]) {
              this.score = this.score + verse.items[item.id].score;
              this.items = this.items.filter(function(it) {
                return it.id !== item.id;
              });
              if (this.verses.length > 1) {
                this.render((function() {
                  var _results1;

                  _results1 = [];
                  for (k in this.verses[1].items) {
                    _results1.push(k);
                  }
                  return _results1;
                }).call(this));
              } else {
                this.render([this.end.item]);
              }
              this.verseno += 1;
              if (this.verses.length > 1) {
                this.showTexts(verse.items[item.id].feedback, this.verses[1].verse, function() {
                  return _this.verses = _this.verses.slice(1);
                });
              } else {
                this.finish(verse.items[item.id].feedback);
              }
              break;
            } else {
              _results.push(this.showText("I'm not ready to cut this out of my life just yet..."));
            }
          } else {
            _results.push(this.clickOn());
          }
        }
        return _results;
      }
    };

    return Scene;

  })();

}).call(this);
